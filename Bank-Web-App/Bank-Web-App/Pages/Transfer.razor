@page "/Transfer"
@using Bank_Shared_Classes.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Collections.Generic
@using Bank_Web_App.Services
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IHttpClientService httpClientService

<div class="d-flex flex-column align-items-center w-100">
    <h3 class="mb-4">Transfer funds</h3>
    <div class="card" style="width: 50%;">
        <div class="card-body">
            

            <div class="mb-4">
                <label>Account from</label>
                <Dropdown TItem="long" Class="w-100" @bind-Value="TransactionRequest.FromAccountId">
                    <InitialTip>Select account</InitialTip>
                    <ChildContent>
                        @foreach (var item in InternalAccountlist)
                        {
                            <DropdownListItem TItem="long" Item="@item.Value">@item.Text</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>
            </div>
            <div class="mb-4">
                @if (InternalTransfer)
                {
                    <label>Account to</label>
                    <Dropdown TItem="long" Class="w-100" @bind-Value="TransactionRequest.ToAccountId">
                        <InitialTip>Select account</InitialTip>
                        <ChildContent>
                            @foreach (var item in InternalAccountlist)
                            {
                                <DropdownListItem TItem="long" Item="@item.Value">@item.Text</DropdownListItem>
                            }
                        </ChildContent>
                    </Dropdown>
                }
                else
                {
                    <EditForm Model="@TransactionRequest" OnValidSubmit="HandleTransfer">
                        <DataAnnotationsValidator />
                        <label for="AccountTo">Account number to</label>
                        <InputNumber id="AccountTo" class="form-control border border-dark" @bind-Value="TransactionRequest.ToAccountId" />
                        <ValidationMessage For="@(() => TransactionRequest.ToAccountId)" />
                    </EditForm>
                }
            </div>
            <EditForm Model="@TransactionRequest" OnValidSubmit="HandleTransfer">
                <DataAnnotationsValidator />

                <div class="form-group mb-4">
                    <label for="Amount">Amount To Transfer</label>
                    <InputNumber id="Amount" class="form-control border border-dark" @bind-Value="TransactionRequest.Amount" />
                    <ValidationMessage For="@(() => TransactionRequest.Amount)" />
                </div>

                <div class="form-group mb-4">
                    <label for="Note">Note</label>
                    <InputText id="Note" class="form-control border border-dark" @bind-Value="TransactionRequest.Note" />
                </div>

                <div class="mb-4">
                    <label>Internal transfer</label>
                    <InputCheckbox @bind-Value="InternalTransfer" />
                </div>

                <div class="form-group mb-4">
                    <button type="submit" class="btn btn-primary w-100">Transfer funds</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    // todo
    // HandleTransfer - Creation of new funds transfer
    // validation on dropdowns

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private TransactionRequest TransactionRequest = new TransactionRequest();

    private bool InternalTransfer = true;

    private static List<DropdownItem> InternalAccountlist = new List<DropdownItem>();
    private static List<DropdownItem> InternalAccountlistTest = new List<DropdownItem>();

    private async Task LoadData()
    {

        var principal = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = principal.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
            return;

        var internalAccounts = await httpClientService.SendHttpGetRequest<List<Account>>(IHttpClientService.Endpoints.Account, userId) ?? new();
        if (internalAccounts != null && internalAccounts.Any())
        {
            InternalAccountlist = internalAccounts.Select(x => new DropdownItem($"{x.Name} - {x.AccountNumber} - {x.Money} DKK", x.AccountNumber)).ToList();
        }
    }

    private async void HandleTransfer()
    {
        //add api call
    }
}